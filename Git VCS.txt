
                Version Control System - Using Git
                **********************************
                2nd Dec, 2016

                VCS Egs: CVS, SVN, Git, Mercurial (Hg)


    GIT BASICS:
    -----------

git init

    Initializes Git in a directory.
    Creates hidden directory .git.
    You can remove .git to remove Git.


git config --global user.email "anirudhkhanna.cse@gmail.com"
git config --global user.name "Anirudh Khanna"

    Configure email and username in Git.


git add file_name

    Add files to index (aka. staging area - to track for changes and commits).

git add .    /    git add -A

    Add all the files to index.


git status

    Status of the repo. Which files are added, which are changed etc.


git commit -m "Commit message"

    Commit the currently added files.


vim file1

    Now creating a new file, named file1


git status

    On branch master
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   file1

    no changes added to commit (use "git add" and/or "git commit -a")


git add file1

    Adding the new file to the staging area.


git status

    On branch master
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        modified:   file1


git commit -m "Commit message"

    Committing new changes.


git log

    Log keeps track of all the commits.
    Every commit will have a unique hash which represents itself.

git log --stat

    Log with stats.

git log --since="2 month"

    Log since a given time.

git log -p

    Log along with changes made in files (diff).


git checkout 31e47ae763f0a125d0d8d069a3378e3a502f0861
git checkout <COMMITNO>

    Revert back to a commit.


    GIT STAGES AND WORKING WITH REMOTE REPO:
    ----------------------------------------

    Till now, our repository is a local repository. We need a remote server for sharing our work, to and from which we can push and pull our work.
    For example, GitHub is such an online service. BitBucket and GitLab are other such services. (Look them up.)

    Various stages of a file can be in:
    1. Working Directory
    2. Staging area (index)     [Added files for tracking]
    3. Committed                [Committed changes]
    4. Pushed                   [Pushed to remote]

    (Remote Central Repo)
        |   |   |
        |   |   |
        |   |   |
        A   B   C   (Local work)

    We use git push command to push the commits made on the local branch to a remote repository.
    We use git pull command to pull the work from a remote repository to our local directory.
    These commands take two arguments:
        A remote name, for example, origin
        A branch name, for example, master

git push origin master
git push <REMOTENAME> <BRANCHNAME>

    Push to the master branch of remote repo.

git pull origin master
git pull <REMOTENAME> <BRANCHNAME>

    Pull from the master branch of remote repo.


    BRANCHING:
    ----------

    Branches can be created which diverge from the master branch. The new branch can be used to implement and experiment upon new features/changes.
    When the new branch is finally ready, merge can be performed with the main, master branch.

git branch

    List all branches.

git branch gh-pages
git branch <BRANCHNAME>

    Create a new branch named gh-pages.

git branch -d gh-pages
git branch -d <BRANCHNAME>

    Delete a given branch.

git checkout gh-pages
git checkout <BRANCHNAME>

    Switch to the branch gh-pages.

git merge master
git merge <BRANCHTOMERGE>

    Merge a given branch (here, master) into the current branch.
